<%
title = 'Create New Page';
%>
<%- contentFor('body') %>

<div class="container mx-auto px-4 py-8">
  <div class="max-w-3xl mx-auto">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-3xl font-bold text-white">Create New Page</h1>
      <a href="/pages" class="text-blue-400 hover:text-blue-300">
        Back to Pages
      </a>
    </div>

    <form action="/pages" method="POST" class="bg-dark-800 rounded-lg shadow-md p-6">
      <!-- Basic Information -->
      <div class="mb-8">
        <h2 class="text-xl font-semibold text-white mb-4">Basic Information</h2>
        
        <div class="mb-6">
          <label for="domain" class="block text-sm font-medium text-gray-400 mb-2">Domain</label>
          <input type="text" id="domain" name="domain" required
            class="w-full px-3 py-2 bg-dark-700 border border-dark-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-white"
            placeholder="example.com">
          <p class="mt-1 text-sm text-gray-500">The domain where this maintenance page will be displayed.</p>
        </div>

        <div class="mb-6">
          <label for="title" class="block text-sm font-medium text-gray-400 mb-2">Page Title</label>
          <input type="text" id="title" name="title" required
            class="w-full px-3 py-2 bg-dark-700 border border-dark-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-white">
        </div>

        <div class="mb-6">
          <label for="description" class="block text-sm font-medium text-gray-400 mb-2">Description</label>
          <textarea id="description" name="description" rows="3"
            class="w-full px-3 py-2 bg-dark-700 border border-dark-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-white"
            placeholder="Enter a brief description of your status page (optional)"></textarea>
          <p class="mt-1 text-sm text-gray-500">Optional. A brief description of your status page.</p>
        </div>

        <div class="mb-6">
          <label for="content" class="block text-sm font-medium text-gray-400 mb-2">Page Content</label>
          <textarea id="content" name="content" rows="10" required
            class="w-full px-3 py-2 bg-dark-700 border border-dark-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-white"></textarea>
        </div>

        <div class="mb-6">
          <label for="status" class="block text-sm font-medium text-gray-400 mb-2">Status</label>
          <select id="status" name="status" required
            class="w-full px-3 py-2 bg-dark-700 border border-dark-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-white">
            <option value="draft">Draft</option>
            <option value="published">Published</option>
            <option value="scheduled">Scheduled</option>
            <option value="archived">Archived</option>
          </select>
        </div>

        <div class="mb-6 hidden" id="schedulingOptions">
          <label for="scheduledFor" class="block text-sm font-medium text-gray-400 mb-2">Schedule For</label>
          <div class="relative">
            <input type="datetime-local" id="scheduledFor" name="scheduledFor"
              class="w-full px-3 py-2 bg-dark-700 border border-dark-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-white"
              min="<%= new Date().toISOString().slice(0, 16) %>">
            <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
              <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd" />
              </svg>
            </div>
          </div>
          <p class="mt-1 text-sm text-gray-500">When should this page be published?</p>
        </div>
      </div>

      <!-- Design Settings -->
      <div class="mb-8">
        <h2 class="text-xl font-semibold text-white mb-4">Design Settings</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label for="backgroundColor" class="block text-sm font-medium text-gray-400 mb-2">Background Color</label>
            <div class="flex items-center space-x-2">
              <input type="color" id="backgroundColor" name="design[backgroundColor]" value="#000000"
                class="h-10 w-10 p-1 rounded border border-dark-600">
              <input type="text" data-color-input="backgroundColor" value="#000000"
                class="flex-1 px-3 py-2 bg-dark-700 border border-dark-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-white">
            </div>
          </div>

          <div>
            <label for="textColor" class="block text-sm font-medium text-gray-400 mb-2">Text Color</label>
            <div class="flex items-center space-x-2">
              <input type="color" id="textColor" name="design[textColor]" value="#ffffff"
                class="h-10 w-10 p-1 rounded border border-dark-600">
              <input type="text" data-color-input="textColor" value="#ffffff"
                class="flex-1 px-3 py-2 bg-dark-700 border border-dark-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-white">
            </div>
          </div>
        </div>

        <div class="mt-6">
          <label for="fontFamily" class="block text-sm font-medium text-gray-400 mb-2">Font Family</label>
          <select id="fontFamily" name="design[fontFamily]"
            class="w-full px-3 py-2 bg-dark-700 border border-dark-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-white">
            <option value="Inter">Inter</option>
            <option value="Roboto">Roboto</option>
            <option value="Open Sans">Open Sans</option>
          </select>
        </div>

        <div class="mt-6">
          <label for="layout" class="block text-sm font-medium text-gray-400 mb-2">Layout</label>
          <select id="layout" name="design[layout]"
            class="w-full px-3 py-2 bg-dark-700 border border-dark-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-white">
            <option value="centered">Centered</option>
            <option value="left-aligned">Left Aligned</option>
            <option value="right-aligned">Right Aligned</option>
          </select>
        </div>

        <div class="mt-6">
          <label for="logo" class="block text-sm font-medium text-gray-400 mb-2">Logo URL</label>
          <input type="url" id="logo" name="design[logo]"
            class="w-full px-3 py-2 bg-dark-700 border border-dark-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-white"
            placeholder="https://example.com/logo.png">
          <p class="mt-1 text-sm text-gray-500">Optional. Recommended size: 200x50px</p>
        </div>
      </div>

      <div class="flex justify-end space-x-4">
        <a href="/pages" class="px-4 py-2 text-blue-400 hover:text-blue-300">
          Cancel
        </a>
        <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
          Create Page
        </button>
      </div>
    </form>
  </div>
</div>

<%- contentFor('scripts') %>
<script>
// Sync color inputs
function setupColorInputs(colorId) {
  const colorInput = document.getElementById(colorId);
  const textInput = document.querySelector(`[data-color-input="${colorId}"]`);

  colorInput.addEventListener('input', (e) => {
    textInput.value = e.target.value.toUpperCase();
  });

  textInput.addEventListener('input', (e) => {
    let value = e.target.value;
    
    // Add # if missing
    if (value && !value.startsWith('#')) {
      value = '#' + value;
      e.target.value = value;
    }
    
    // Convert to uppercase
    value = value.toUpperCase();
    
    // Update color picker if valid hex
    if (/^#[0-9A-F]{6}$/.test(value)) {
      colorInput.value = value;
      e.target.classList.remove('border-red-500');
    } else {
      e.target.classList.add('border-red-500');
    }
  });

  // Handle blur event to reset invalid values
  textInput.addEventListener('blur', (e) => {
    const value = e.target.value.toUpperCase();
    if (!/^#[0-9A-F]{6}$/.test(value)) {
      e.target.value = colorInput.value.toUpperCase();
      e.target.classList.remove('border-red-500');
    }
  });

  // Initial sync
  textInput.value = colorInput.value.toUpperCase();
}

setupColorInputs('backgroundColor');
setupColorInputs('textColor');

// Handle status change
document.getElementById('status').addEventListener('change', function(e) {
  const schedulingOptions = document.getElementById('schedulingOptions');
  schedulingOptions.classList.toggle('hidden', e.target.value !== 'scheduled');
});
</script> 